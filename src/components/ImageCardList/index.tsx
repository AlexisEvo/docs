import React from 'react';
import clsx from 'clsx';
import {
  useCurrentSidebarCategory,
  filterDocCardListItems,
} from '@docusaurus/theme-common';
import ImageCard from '../ImageCard'
import DocCard from '@theme/DocCard';

function DocCardListMapCallback(item, index) {
  var img = require('@site/static/img/docusaurus.png').default
  try {
    switch (item.type) {
      case 'link':
        // link page would have be using img at same level
        try {
          img = require("@site/" + item.href.split("/").slice(1,-1).join("/") + "/img/" + item.href.split("/").pop() + ".png").default;
        } catch (el) {
          // rarer case: doc folder became page because only index page
          img = require("@site/" + item.href.split("/").slice(1,-1).join("/") + "/img/" + item.href.split("/")[item.href.split("/").length - 2] + ".png").default;
        }
        break;
      case 'category':
        // category will have image under 'category' level or at same level (if using autogenerated page)
        try {
          // at same category level? 
          img = require("@site/" + item.href.split("/").slice(1,-1).join("/") + "/img/" + item.href.split("/")[item.href.split("/").length - 2] + ".png").default;
        } catch (ec) {
          // console.log(ec);
          // case: image at same level 
          img = require("@site/" + item.href.split("/").slice(1,-2).join("/") + "/img/" + item.href.split("/")[item.href.split("/").length - 2] + ".png").default;
        }
        break;
      default:
        throw new Error(`unknown item type ${JSON.stringify(item)}`);
    }
  } catch (e) {
    img = require('@site/static/img/docusaurus.png').default
    console.log(e);
  } finally {
    return (
      <article key={index} className="col col--6 margin-bottom--lg">
        <ImageCard item={item} img={img} />
      </article>
    )
  }
}

function DocCardListForCurrentSidebarCategory({className}) {
  const category = useCurrentSidebarCategory();
  return <ImageCardList items={category.items} className={className} />;
}
export default function ImageCardList(props) {
  const {items, className} = props;
  if (!items) {
    return <DocCardListForCurrentSidebarCategory {...props} />;
  }
  const filteredItems = filterDocCardListItems(items);
  return (
    <section className={clsx('row', className)}>
      {filteredItems.map(DocCardListMapCallback)}
    </section>
  );
}
