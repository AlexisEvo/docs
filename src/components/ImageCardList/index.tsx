import React from 'react';
import clsx from 'clsx';
import {
  useCurrentSidebarCategory,
  filterDocCardListItems,
} from '@docusaurus/theme-common';
import ImageCard from '../ImageCard'
import DocCard from '@theme/DocCard';

function DocCardListMapCallback(item, index) {
  var img = require('@site/static/img/docusaurus.png').default
  console.log("looking for image for", item.label)

  let href = item.href
  let hrefsplit = href.split("/")

  try {
    switch (item.type) {
      case 'link':
        // link page would have be using img at same level
        // pretend category pages are pages
        if (href.slice(-1) == '/') {
          href = href.slice(0, -1)
          hrefsplit = href.split("/")
        }
        console.log(href);
        console.log("type is link")
        try {
          // regular page
          img = require("@site/" + hrefsplit.slice(1,-1).join("/") + "/img/" + hrefsplit[hrefsplit.length - 1] + ".png").default;
        } catch (el) {
          console.log(el);
          // rare case: link is actually a category root
          try {
            img = require("@site/" + hrefsplit.slice(1).join("/") + "/img/" + hrefsplit[hrefsplit.length - 1] + ".png").default;
          } catch (el1) {
            console.log(el1);
            // rare case 2: doc folder became page because only index page *not* named category root and explicitly declared in _category_.json
            img = require("@site/" + hrefsplit.slice(1,-1).join("/") + "/img/" + hrefsplit[hrefsplit.length - 2] + ".png").default;
          }
        }
        break;
      case 'category':
        // category will have image under 'category' level or at same level (if using autogenerated page)
        // pretend category pages are categories
        if (href.slice(-1) != '/') {
          href += '/'
          hrefsplit = href.split("/")
        }
        console.log(href);
        try {
          // at category level 
          // console.log("href:"+ item.href);
          // console.log("cat image:" + "@site/" + item.href.split("/").slice(1,-1).join("/") + "/img/" + item.href.split("/")[item.href.split("/").length - 2] + ".png");
          img = require("@site/" + hrefsplit.slice(1,-1).join("/") + "/img/" + hrefsplit[hrefsplit.length - 2] + ".png").default;
        } catch (ec) {
          console.log(ec)
          // case: image at same level 
          img = require("@site/" + hrefsplit.slice(1,-2).join("/") + "/img/" + hrefsplit[hrefsplit.length - 2] + ".png").default;
        }
        break;
      default:
        throw new Error(`unknown item type ${JSON.stringify(item)}`);
    }
  } catch (e) {
    img = require('@site/static/img/docusaurus.png').default
    console.log(e);
  } finally {
    return (
      <article key={index} className="col col--6 margin-bottom--lg">
        <ImageCard item={item} img={img} />
      </article>
    )
  }
}

function DocCardListForCurrentSidebarCategory({className}) {
  const category = useCurrentSidebarCategory();
  return <ImageCardList items={category.items} className={className} />;
}
export default function ImageCardList(props) {
  const {items, className} = props;
  if (!items) {
    return <DocCardListForCurrentSidebarCategory {...props} />;
  }
  const filteredItems = filterDocCardListItems(items);
  return (
    <section className={clsx('row', className)}>
      {filteredItems.map(DocCardListMapCallback)}
    </section>
  );
}
